<#@ template debug="false" hostspecific="true" language="shell" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".sh" #>
#!/bin/bash
#
# Simple script to register the MQTT topics when the container starts for the first time...

MQTT_SERVER=`cat /app/mqtt.json | jq '.server' -r`
MQTT_PORT=`cat /app/mqtt.json | jq '.port' -r`
MQTT_TOPIC=`cat /app/mqtt.json | jq '.topic' -r`
MQTT_DEVICENAME=`cat /app/mqtt.json | jq '.devicename' -r`
MQTT_MANUFACTURER=`cat /app/mqtt.json | jq '.manufacturer' -r`
MQTT_MODEL=`cat /app/mqtt.json | jq '.model' -r`
MQTT_SERIAL=`cat /app/mqtt.json | jq '.serial' -r`
MQTT_VER=`cat /app/mqtt.json | jq '.ver' -r`
MQTT_USERNAME=`cat /app/mqtt.json | jq '.username' -r`
MQTT_PASSWORD=`cat /app/mqtt.json | jq '.password' -r`

registerTopic () {
    mosquitto_pub \
        -h $MQTT_SERVER \
        -p $MQTT_PORT \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -i ""$MQTT_DEVICENAME"_"$MQTT_SERIAL"" \
        -t ""$MQTT_TOPIC"/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/$1/config" \
        -r \
        -m "{
            \"name\": \"$1_"$MQTT_DEVICENAME"\",
            \"uniq_id\": \""$MQTT_SERIAL"_$1\",
            \"device\": { \"ids\": \""$MQTT_SERIAL"\", \"mf\": \""$MQTT_MANUFACTURER"\", \"mdl\": \""$MQTT_MODEL"\", \"name\": \""$MQTT_DEVICENAME"\", \"sw\": \""$MQTT_VER"\"},
            \"state_topic\": \""$MQTT_TOPIC"/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/$1\",
            \"state_class\": \"measurement\",
            \"unit_of_meas\": \"$2\",
            \"icon\": \"mdi:$3\"
        }"
}
registerEnergyTopic () {
    mosquitto_pub \
        -h $MQTT_SERVER \
        -p $MQTT_PORT \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -i ""$MQTT_DEVICENAME"_"$MQTT_SERIAL"" \
        -t "$MQTT_TOPIC/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/$1/LastReset" \
		-r \
        -m "1970-01-01T00:00:00+00:00"

    mosquitto_pub \
        -h $MQTT_SERVER \
        -p $MQTT_PORT \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -i ""$MQTT_DEVICENAME"_"$MQTT_SERIAL"" \
        -t ""$MQTT_TOPIC"/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/$1/config" \
        -r \
        -m "{
            \"name\": \"$1_"$MQTT_DEVICENAME"\",
            \"uniq_id\": \""$MQTT_SERIAL"_$1\",
            \"device\": { \"ids\": \""$MQTT_SERIAL"\", \"mf\": \""$MQTT_MANUFACTURER"\", \"mdl\": \""$MQTT_MODEL"\", \"name\": \""$MQTT_DEVICENAME"\", \"sw\": \""$MQTT_VER"\"},
            \"state_topic\": \""$MQTT_TOPIC"/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/$1\",
            \"last_reset_topic\": \""$MQTT_TOPIC"/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/$1/LastReset\",			
            \"state_class\": \"measurement\",
            \"device_class\": \"$4\",
            \"unit_of_meas\": \"$2\",
            \"icon\": \"mdi:$3\"
        }"
}

registerInverterRawCMD () {
    mosquitto_pub \
        -h $MQTT_SERVER \
        -p $MQTT_PORT \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -i ""$MQTT_DEVICENAME"_"$MQTT_SERIAL"" \
        -t ""$MQTT_TOPIC"/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/COMMANDS/config" \
        -r \
        -m "{
            \"name\": \""$MQTT_DEVICENAME"_COMMANDS\",
            \"uniq_id\": \""$MQTT_DEVICENAME"_"$MQTT_SERIAL"\",
            \"device\": { \"ids\": \""$MQTT_SERIAL"\", \"mf\": \""$MQTT_MANUFACTURER"\", \"mdl\": \""$MQTT_MODEL"\", \"name\": \""$MQTT_DEVICENAME"\", \"sw\": \""$MQTT_VER"\"},
            \"state_topic\": \""$MQTT_TOPIC"/sensor/"$MQTT_DEVICENAME"_"$MQTT_SERIAL"/COMMANDS\"
            }"
}

<#
    string sensorsPath = this.Host.ResolvePath($"..\\Ph1800.json");
    string sensorsJson = File.ReadAllText(sensorsPath);
    var sensors = JArray.Parse(sensorsJson);

    foreach(var sensor in sensors)
    {
        if (sensor.Value<bool>("Publish") == false) continue;

        WriteLine($"registerTopic   {"\"" + sensor["Name"] + "\"", -40}   {"\"" + sensor["Uom"] + "\"", -15}    {"\"" + sensor["Icon"] + "\""}");
    }
#>

# Register composite topics manually for now

registerTopic "BatteryPercent"                             "%"       "battery"                              "battery"

registerTopic "AccumulatedChargerPower"                    "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedDischargerPower"                 "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedBuyPower"                        "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedSellPower"                       "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedLoadPower"                       "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedSelfusePower"                    "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedPvsellPower"                     "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedGridChargerPower"                "KWH"     "chart-bell-curve-cumulative"          "energy"
registerTopic "AccumulatedPvPower"                         "KWH"     "chart-bell-curve-cumulative"          "energy"

# Register topic for push commands
registerInverterRawCMD
